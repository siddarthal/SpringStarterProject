package com.example.demo.aspect;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterReturning;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Configuration;

@Aspect
@Configuration
public class AfterAopAspect {

	private Logger logger = LoggerFactory.getLogger(this.getClass());
	
	//What kind of method calls I would intercept
	//execution(* PACKAGE.*.*(..))
//	Pointcut
//	Weaving and weaver
	@AfterReturning(
		value="execution(* com.example.demo.data.*.*(..))" ,
		returning = "result"	
			)
	public void afterReturning(JoinPoint joinPoint,Object result){
//		Advice
		logger.info("{} returned with value this ... {}", joinPoint,result);
	}
//	@After(
//			value="execution(* com.example.demo.data.*.*(..))"
//				)
//		public void after(JoinPoint joinPoint){
////			Advice
//			logger.info("returned at", joinPoint);
//		}
//	
}
